# vib
name: Moonflyers Vanilla Desktop # Replace this name with your image name
id: moonflyer # Replace this ID with your image ID

# stages
stages:
- id: build
  base: ghcr.io/vanilla-os/desktop:dev # Optionally, Replace this image URL with a different one i.e. nvidia:main, etc
  singlelayer: false
  labels:
    maintainer: self-maintained # Optionally, Replace this with your name
  args:
    DEBIAN_FRONTEND: noninteractive # Set the image environment as non-interactive
  
# Commands to run first before building the modules
  runs:
    commands:
      - echo 'APT::Install-Recommends "1";' > /etc/apt/apt.conf.d/01norecommends

  modules:
    - name: init-setup
      type: shell
      commands:
      - lpkg --unlock
      - apt-get update

# BEGIN custom actions

    - name: essentials # apt do install essentials
      type: apt
      source:
        packages:
        - syncthing
        - eza
        - spacenavd
        - spnavcfg
        - git
        - nano
        - dkms
        - systemd-dev
        - gettext
    
    - name: virt-dependencies
      type: apt
      source:
        packages:
        - qemu-kvm
        - qemu-system
        - qemu-utils
        - qemu-guest-agent
        - libvirt-daemon-system
        - libvirt-clients
        - bridge-utils
        - virt-manager
        - virtiofsd
        - ovmf
        - looking-glass-client

    - name: compile-pipeline
      type: apt
      source:
        packages:
        - libadwaita-1-dev
        - libgtk-4-dev
        - meson
        - rustc
        - cmake

    - name: install-tuxedo-drivers # Install Tuxedo Software
      type: shell
      commands:
        - wget https://deb.tuxedocomputers.com/ubuntu/pool/main/t/tuxedo-drivers/tuxedo-drivers_4.11.3_all.deb
        - dpkg -i tuxedo-drivers_4.11.3_all.deb

    - name: tailord
      type: shell
      commands:
        - git clone https://github.com/AaronErhardt/tuxedo-rs.git
        - cd tuxedo-rs/tailord
        - meson setup --prefix=/usr _build
        - ninja -C _build
        - cp _build/src/tailord /usr/bin/
        - cp _build/tailord.service /usr/lib/systemd/system/
        - cp com.tux.Tailor.conf /etc/dbus-1/system.d/
        - ln -s /usr/lib/systemd/system/tailord.service /etc/systemd/system/multi-user.target.wants/tailord.service
        - ln -s /usr/lib/systemd/system/tailord.service /etc/systemd/system/tailord.service
        - cd ../tailor_gui
        - meson setup --prefix=/usr _build
        - ninja -C _build
        - ninja -C _build install
        - cd ../tailor_cli
        - cargo build -Z unstable-options --release --out-dir build
        - cp build/tailor /usr/bin

    - name: install-docker
      type: shell
      commands:
        - install -m 0755 -d /etc/apt/keyrings
        - curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
        - chmod a+r /etc/apt/keyrings/docker.asc
        - echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian bookworm stable" > /etc/apt/sources.list.d/docker.list
        - cat /etc/apt/sources.list.d/docker.list
        - apt-get update
        - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      
  # END custom actions

    - name: set-image-name-abroot
      type: includes
      includes:
        - modules/80-set-image-abroot-config.yml

    - name: cleanup
      type: shell
      commands:
      - apt-get autoremove -y
      - apt-get clean
      - lpkg --lock

    - name: fsguard
      type: fsguard
      CustomFsGuard: false
      FsGuardLocation: "/usr/sbin/FsGuard"
      GenerateKey: true
      FilelistPaths: ["/usr/bin"]
      modules:
        - name: remove-prev-fsguard
          type: shell
          commands:
            - rm -rf /FsGuard 
            - rm -f ./minisign.pub ./minisign.key 
            - chmod +x /usr/sbin/init

    - name: cleanup2
      type: shell
      commands:
        - rm -rf /tmp/*
        - rm -rf /var/tmp/*
        - rm -rf /sources
